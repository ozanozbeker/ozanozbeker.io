{
  "hash": "72cc8cdad3a23368dcd1401db224d3cf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggplot2: Elegant Graphics for Data Analysis (3e) | Part 1\"\nsubtitle: \"*Getting Started*\"\ndescription: \"Join me as I work through the exercises in the textbook.\"\ndate: \"2024-05-24\"\nimage: ../resources/images/ggplot2_book_cover.jpg\ncategories: [\"R\", \"Data Visualization\", \"Textbook Workthrough\"]\n---\n\n\n\n# Introduction\n\nIn this series of posts, I will be completing the exercises in [*ggplot2: Elegant Graphics for Data Analysis (3e)*](https://ggplot2-book.org/), the ultimate guide to [{ggplot2}](https://ggplot2.tidyverse.org/). I wanted to practice this textbook to better my knowledge of {ggplot2}, but also get a feel for the design behind the package, [*The Grammar of Graphics*](https://link.springer.com/book/10.1007/0-387-28695-0).\n\n> *\"Without a grammar, there is no underlying theory, so most graphics packages are a big collection of special cases.\"*\n\nI will not be re-iterating all of the information from the book, but provide a brief summary of each section and run through the exercises. Follow along to see my take on the exercises, as well as my notes and thoughts as I progress through the book.\n\nIf you would like to see the source code behind this post, you can click on the **Code** button at the top of right of the page, sandwiched between the title of the post and the side panel.\n\nThe book is split into five parts: *Getting Started*, *Layers*, *Scales*, *The Grammar*, & *Advanced Topics*. In this post, I will be working through the first part, *Getting Started*.\n\n::: callout-tip\nBecause this is book about {ggplot2}, I will use package-explicit function when using a function for the first time that is not in base R or provided by {ggplot2}. All of these packages are loaded with the {[tidyverse](https://tidyverse.tidyverse.org/)} meta-package.\n:::\n\n::: callout-important\nThe book was still in development when writing this post, so some exercises might not match depending on when you are reading of this post.\n:::\n\n## Required Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\n  \"colorBlindness\", \"directlabels\", \"dplyr\", \"ggforce\", \"gghighlight\",\n  \"ggnewscale\", \"ggplot2\", \"ggraph\", \"ggtext\", \"ggthemes\", \"hexbin\", \"Hmisc\", \n  \"mapproj\", \"maps\", \"munsell\", \"ozmaps\", \"paletteer\", \"patchwork\", \"rmapshaper\",\n  \"scico\", \"seriation\", \"sf\", \"stars\", \"tidygraph\", \"tidyr\", \"wesanderson\"\n))\n```\n:::\n\n\n\n# First Steps\n\n## Introduction\n\nThe goal of this chapter it so introduce the reader to {ggplot2} as quickly as possible. Because it's an intro, I will not be formatting the plots any further than the questions ask for.\n\n## Fuel Economy Data\n\nIn this chapter, we will be using mostly one data set, `mpg`, from <http://fueleconomy.gov>. It holds information about the fuel economy of popular car models in 1999 & 2009.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # Data Wrangling, includes {ggplot2}\n\nmpg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n\n\n:::\n:::\n\n\n\nA quick overview of the variables:\n\n-   `cty` and `hwy` record miles per gallon (mpg) for city and highway driving.\n-   `displ` is the engine displacement in liters.\n-   `drv` is the drivetrain: front wheel (f), rear wheel (r), or four wheel.\n-   `model` is the model of car. There are 38 models, selected because they had a new edition every year between 1999 and 2008.\n-   `class` is a categorical variable describing the \"type\" of car: two seater, SUV, compact, etc.\n\n### Exercises\n\n[1. List five functions that you could use to get more information about the `mpg` dataset.]{.blog-question}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(mpg)\nglimpse(mpg)\nhead(mpg)\nstr(mpg)\nView(mpg)\n```\n:::\n\n\n\n[2. How can you find out what other datasets are included with {ggplot2}?]{.blog-question}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(package = 'ggplot2')\n```\n:::\n\n\n\n[3. Apart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance traveled with fixed amount of fuel). How could you convert `cty` and `hwy` into the European standard of `l/100km`?]{.blog-question}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_to_euro = function(mpg) {\n  # 1 mile = 1.60934 kilometers\n  # 1 gallon (US) = 3.78541 liters\n  \n  g_p_m = 1 / mpg\n  l_p_km = 3.78541 / 1.60934    # we multiply by 100 because it's \"per 100\"\n  l100km = l_p_km * 100 * g_p_m # the denominator 100 cancels right hand 100\n  \n  return(l100km)\n}\n\nmpg |> dplyr::mutate(\n  cty_euro = us_to_euro(cty), \n  hwy_euro = us_to_euro(hwy), \n  .keep = 'used')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 4\n     cty   hwy cty_euro hwy_euro\n   <int> <int>    <dbl>    <dbl>\n 1    18    29     13.1     8.11\n 2    21    29     11.2     8.11\n 3    20    31     11.8     7.59\n 4    21    30     11.2     7.84\n 5    16    26     14.7     9.05\n 6    18    26     13.1     9.05\n 7    18    27     13.1     8.71\n 8    18    26     13.1     9.05\n 9    16    25     14.7     9.41\n10    20    28     11.8     8.40\n# ℹ 224 more rows\n```\n\n\n:::\n:::\n\n\n\n[4. Which manufacturer has the most models in this dataset? Which model has the most variations? Does your answer change if you remove the redundant specification of drivetrain (e.g. \"pathfinder 4wd\", \"a4 quattro\") from the model name?]{.blog-question}\n\n\n\n::: {.cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\nmpg |> dplyr::count(manufacturer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 2\n   manufacturer     n\n   <chr>        <int>\n 1 audi            18\n 2 chevrolet       19\n 3 dodge           37\n 4 ford            25\n 5 honda            9\n 6 hyundai         14\n 7 jeep             8\n 8 land rover       4\n 9 lincoln          3\n10 mercury          4\n11 nissan          13\n12 pontiac          5\n13 subaru          14\n14 toyota          34\n15 volkswagen      27\n```\n\n\n:::\n\n```{.r .cell-code}\nmpg |> count(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 38 × 2\n   model                  n\n   <chr>              <int>\n 1 4runner 4wd            6\n 2 a4                     7\n 3 a4 quattro             8\n 4 a6 quattro             3\n 5 altima                 6\n 6 c1500 suburban 2wd     5\n 7 camry                  7\n 8 camry solara           7\n 9 caravan 2wd           11\n10 civic                  9\n# ℹ 28 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nmpg |> \n  mutate(model_base = stringr::str_extract(model, \"^\\\\w+\")) |> \n  count(model_base) # yes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35 × 2\n   model_base     n\n   <chr>      <int>\n 1 4runner        6\n 2 a4            15\n 3 a6             3\n 4 altima         6\n 5 c1500          5\n 6 camry         14\n 7 caravan       11\n 8 civic          9\n 9 corolla        5\n10 corvette       5\n# ℹ 25 more rows\n```\n\n\n:::\n:::\n\n\n\n## Key Components\n\nEvery {ggplot2} plot has three key components:\n\n1.  **Data**,\n2.  A set of **aesthetic mappings** between variables in the data and visual properties, and\n3.  At least one layer which describes how to render each observation. Layers are usually created with a **geom** function.\n\nHere's a simple example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.3 Example-1.png){width=672}\n:::\n:::\n\n\n\n### Exercises\n\n[1. How would you describe the relationship between `cty` and `hwy`? Do you have any concerns about drawing conclusions from that plot?]{.blog-question}\n\nThere is a strong positive linear relationship between city & highway gas mileage. Just plotting only those two might generalize too much across different classes of vehicles. Even though it may be true, maybe different classes of vehicles are more equal in city vs highway gas mileage vs performing substantially better in one or the other.\n\n[2. What does `ggplot(mpg, aes(model, manufacturer)) + geom_point()` show? Is it useful? How could you modify that data to make it more informative?]{.blog-question}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(model, manufacturer)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.3 Q1-1.png){width=672}\n:::\n:::\n\n\n\nThis plot just shows which manufacturers make which models. Having two categorical variables on a dot plot is not very useful as there is no inherent value in the relationship between two categories existing. Turning one category into a count() or other stat would show a dimensional relationship across the other category.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> count(manufacturer) |> ggplot(aes(n, manufacturer)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.3 Q2-1.png){width=672}\n:::\n:::\n\n\n\n[3. Describe the data, aesthetic mappings, and layers used for each of the following plots. You'll need to guess a little because you haven't seen all the datasets and functions yet, but use your common sense! See if you can predict what the plot will look like before running the code.]{.blog-question}\n\ni.  `ggplot(mpg, aes(cty, hwy)) + geom_point()` A dot plot showing a positive relationship between city mpg and highway mpg.\nii. `ggplot(diamonds, aes(carat, price)) + geom_point()` A dot plot showing a positive relationship between diamond price and its carat rating.\niii. `ggplot(economics, aes(date, unemploy)) + geom_line()` A line plot showing unemployment rate across time.\niv. `ggplot(mpg, aes(cty)) + geom_histogram()` A histogram showing the distribution of cars across city mpg rating.\n\n\n\n::: {.cell layout-nrow=\"2\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.3 Q3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat, price)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.3 Q3-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(economics, aes(date, unemploy)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.3 Q3-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(cty)) + geom_histogram()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.3 Q3-4.png){width=672}\n:::\n:::\n\n\n\n## Color, Size, Shape, and Other Aesthetic Attributes\n\nTo add additional variables to a plot, we can use other aesthetics like color, shape, and size. These work in the same way as the `x` and `y` aesthetics, and are added into the call to `aes()`:\n\n-   `aes(displ, hwy, color = class)`\n-   `aes(displ, hwy, shape = drv)`\n-   `aes(displ, hwy, size = cyl)`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy, color = class)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.4 Example-1.png){width=672}\n:::\n:::\n\n\n\n### Exercises\n\n[1. Experiment with the color, shape and size aesthetics. What happens when you map them to continuous values? What about categorical values? What happens when you use more than one aesthetic in a plot?]{.blog-question}\n\n\n\n::: {.cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy, color = cyl)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.4 Q1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy, color = as.character(year))) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.4 Q1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy, color = cyl, shape = as.character(year))) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.4 Q1-3.png){width=672}\n:::\n:::\n\n\n\n[2. What happens if you map a continuous variable to shape? Why? What happens if you map `trans` to shape? Why?]{.blog-question}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy, shape = hwy)) + geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `geom_point()`:\n! Problem while computing aesthetics.\nℹ Error occurred in the 1st layer.\nCaused by error in `scale_f()`:\n! A continuous variable cannot be mapped to the shape aesthetic.\nℹ Choose a different aesthetic or use `scale_shape_binned()`.\n```\n\n\n:::\n:::\n\n\n\nYou get an error because continuous variables lie on a scale of infinity, and you cannot have infinite shapes. This is why in the previous question, converter `year` into a character because it is a continuous variable `year = 1999` in the data frame, but its use is actually as a category, comparing 1999 vehicles to 2008 vehicles.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy, shape = trans)) + geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The shape palette can deal with a maximum of 6 discrete values because more\nthan 6 becomes difficult to discriminate\nℹ you have requested 10 values. Consider specifying shapes manually if you need\n  that many have them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 96 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.4 Q2.2-1.png){width=672}\n:::\n:::\n\n\n\nYou get a warning because although `trans` is a categorical variable, it has more values than {ggplot2} has shapes (6 in total), so other values do not get markers.\n\nThis highlights the difference between Errors and Warnings with {ggplot2}. As with regular R code, Warnings show where the code can still run but probably with not the effect that was intended, where Errors are impossible to process and the code does not run.\n\n[3. How is drive train related to fuel economy? How is drive train related to engine size and class?]{.blog-question}\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.4 Q3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, class, color = drv)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.4 Q3-2.png){width=672}\n:::\n:::\n\n\n\nFront-wheel transmission vehicle seems to have the best highway gas mileage, where 4-wheel and rear-wheel show similar performance to each other.\n\nAlmost all 4-wheel drive vehicles (in this dataset) are either an SUV or Pickup, and have the biggest range in engine size. The smallest vehicles (2-seater & subcompact) have bigger engines and are rear-wheel drive, probably sports cars of some sort. Finally, the regular everyday vehicles like compact & midsize cars have smaller engines and mostly front-wheel drive transmissions.\n\n## Faceting\n\nFaceting creates tables of graphics by splitting the data into subsets and displaying the same graph for each subset. The two type so faceting are **grid** and **wrapped**. We will be focusing on wrapped.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~class)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.5 Example-1.png){width=672}\n:::\n:::\n\n\n\n### Exercises\n\n[1. What happens if you try to facet by a continuous variable like `hwy`? What about `cyl`? What's the key difference?]{.blog-question}\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, cty)) + geom_point() + facet_wrap(~hwy)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.5 Q1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, cty)) + geom_point() + facet_wrap(~cyl)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.5 Q1-2.png){width=672}\n:::\n:::\n\n\n\nThey both facet by the number of unique values in the variable. In the case of `hwy`, there were 27 unique values in this limited dataset because it truly represents a continuous variable. This makes it a bad choice for faceting.\n\n`cyl` on the other hand, actually represents a category (# of cylinders in an engine) although it's in the data frame as a continuous. This may be because it is a number, which is usually continuous.\n\n[2. Use faceting to explore the 3-way relationship between fuel economy, engine size, and number of cylinders. How does faceting by number of cylinders change your assessment of the relationship between engine size and fuel economy?]{.blog-question}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~cyl)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.5 Q2-1.png){width=672}\n:::\n:::\n\n\n\nFaceting by cylinders shows a clearly that smaller engines perform better on fuel economy vs their bigger counterparts, though being a smaller engine does not necessarily mean that it will have good gas mileage.\n\n[3. Read the documentation for `facet_wrap()`. What arguments can you use to control how many rows and columns appear in the output?]{.blog-question}\n\n`nrow` & `ncol` are the arguments to control the number of rows & columns. Here is an extreme example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~trans, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.5 Q3-1.png){width=672}\n:::\n:::\n\n\n\n[4. What does the `scales` argument to `facet_wrap()` do? When might you use it?]{.blog-question}\n\nBy default, the scales locks both the x and y scales on all faceted plots to show the same range, regardless of the range of values in each facet. You might want to free a scale if the axis doesn't have any values for that facet, and the missing range doesn't affect the analysis.\n\nIn this example, we don't need x-axis values for vehicles that don't exist, but keeping the y-axis values on the same scale helps to compare the values across all manufacturers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> \n  ggplot(aes(as_factor(cyl), hwy)) + \n  geom_point() + \n  facet_wrap(~manufacturer, scales = \"free_x\", nrow = 3)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.5 Q4-1.png){width=672}\n:::\n:::\n\n\n\n## Plot Geoms\n\nSubstituting `geom_point()` for a different geom function creates a different plot. *Who would've thought?* In the following sections, we will cover some of the other most used geoms provided in {ggplot2}:\n\n-   `geom_smooth()` fits a smoother to the data and displays the smooth and its standard error.\n-   `geom_boxplot()` produces a box-and-whisker plot to summarize the distribution of set of points.\n-   `geom_histogram()` and `geom_freqpoly()` show the distribution of continuous variables.\n-   `geom_bar()` shows the distribution of categorical variables.\n-   `geom_path()` and `geom_line()` draw lines between the data points. A line plot is constrained to produce lines that travel from left to right, while paths can go in any direction. Lines are typically used to explore how things change over time.\n\n### Adding a smoother to a plot\n\nIf you have a scatterplot with a lot of noise, it can be hard to see the dominant pattern. In this case, it's useful to add a smoothed line to the plot with `geom_smooth()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.1 Example geom_smooth()-1.png){width=672}\n:::\n:::\n\n\n\nAn important argument to `geom_smooth()` is the `method`, which allows you to choose which type of model is used to fit the smooth curve:\n\n-   `method = \"loess\"`, the default for small n, uses a smooth local regression. `\"span\"` controls the level of smoothing.\n-   `method = \"gam\"` fits a generalized additive model provided by the {mgcv} package. You need to load in the package then use a `formula = y ~ s(x)` or `y ~ s(x, bs = \"cs\")` (for large data).\n-   `method = \"lm\"` fits a linear model, giving the line of best fit.\n\n\n\n::: {.cell layout-nrow=\"2\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(span = 0.2)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.1 Example geom_smooth() with span-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(span = 1)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.1 Example geom_smooth() with span-2.png){width=672}\n:::\n\n```{.r .cell-code}\nlibrary(mgcv)\nggplot(mpg, aes(displ, hwy)) + \n  geom_point() + \n  geom_smooth(method = \"gam\", formula = y ~ s(x))\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.1 Example geom_smooth() with span-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) + geom_point() + geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.1 Example geom_smooth() with span-4.png){width=672}\n:::\n:::\n\n\n\n### Boxplots and jittered points\n\nWhen a dataset contains a categorical variable and one or more continuous variables, we might be interested in the distribution of the continuous variable(s) relative to the categorical variable. Because there a few unique number of values for both `drv` and `hwy`, there is a lot of overplotting. There are a few useful techniques to help with this issue:\n\n\n\n::: {.cell layout-nrow=\"2\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.2 Example plot with overplotting-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_jitter()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.2 Example plot with overplotting-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.2 Example plot with overplotting-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_violin()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.2 Example plot with overplotting-4.png){width=672}\n:::\n:::\n\n\n\nThough these are useful techniques, they also have their own drawbacks.\n\n|                               Jitter Plots                               |                                   Boxplots                                    |                                                      Violin Plots                                                       |\n|:------------------:|:-------------------:|:-----------------------------:|\n| Add a little random noise to the data which can help avoid overplotting. | Summarize the shape of the distribution with a handful of summary statistics. | Show a compact representation of the \"density\" of the distribution, highlighting the areas where more points are found. |\n|      Show every point but only work with relatively small datasets.      |              Summarize the whole distribution with 5 statistics.              |                      Give the richest display, but the density estimate can be hard to interpret.                       |\n\n### Histograms and frequency polygons\n\nHistograms and frequency polygons show the distribution of a single numeric variable with more detail than a boxplot but at the expense of needing more space. The only difference between the two is that the prior uses columns and the latter uses lines.\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy)) + geom_histogram()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.3 Example plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy)) + geom_freqpoly()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.3 Example plots-2.png){width=672}\n:::\n:::\n\n\n\nIt is highly recommended to experiment with the `bins` as the default value is 30 and it is unlikely that 30 is the best choice for your dataset.\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy)) + geom_freqpoly(bins = 15)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.3 Example binwidth-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy)) + geom_freqpoly(bins = 45)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.3 Example binwidth-2.png){width=672}\n:::\n:::\n\n\n\nTo compare distributions of subgroups, you can map a categorical variable to either fill (for `geom_histogram()`) or color (for `geom_freqpoly()`).\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, colour = drv)) + \n  geom_freqpoly(binwidth = 0.5)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.3 Example comparing distributions-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, fill = drv)) + \n  geom_histogram(binwidth = 0.5) + \n  facet_wrap(~drv, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.3 Example comparing distributions-2.png){width=672}\n:::\n:::\n\n\n\n### Bar charts\n\nThe discrete analogue of the histogram is the bar chart, `geom_bar()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(manufacturer)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.4 Example bar chart-1.png){width=672}\n:::\n:::\n\n\n\nBar charts can be confusing because there are two very different plots that are both commonly called bar charts.\n\n1.  The first form, like above, assumes your data is **not summarized**, and each observation contributes to one unit to the height of each bar.\n2.  The second form is used for **pre-summarized** data.\n\nFor example, you might have three drugs with the their *average* effect. To display this type of data, you have to tell `geom_bar()` to not run the default stat which bins and counts data. In this case, it's better to use `geom_point()` because it takes up less space than bars, and don't require that the axis includes 0.\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\ndrugs = tibble(drug = c(\"a\", \"b\", \"c\"), effect = c(4.2, 9.7, 6.1))\n\nggplot(drugs, aes(drug, effect)) + geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.4 Example summary bar chart-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(drugs, aes(drug, effect)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.4 Example summary bar chart-2.png){width=672}\n:::\n:::\n\n\n\n#### Bonus\n\nEven if using `geom_point()` might be preferred, because the second type of bar/column chart is so popular, {ggplot2} includes a `geom_col()` that acts exactly the same as `geom_bar(stat = \"identity\")`:\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(drugs, aes(drug, effect)) + geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.4 Example geom_col()-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(drugs, aes(drug, effect)) + geom_col()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.4 Example geom_col()-2.png){width=672}\n:::\n:::\n\n\n\n### Time series with line and path plots\n\nLine and path plots are typically used for time series data, where the order of the data matters to the context of the visual. Line plots join the data points from left to right, while path plots join the points in the order that they appear in the dataset.\n\n|             Line Plot              |                                                      Path Plot                                                      |\n|:----------------:|:----------------------------------------------------:|\n| Plots the data from left to right. |                                Plots the points in the order they appear in dataset.                                |\n|        Show time on x-axis.        | Show how two variables simultaneously change over time, with time encoded in the way the data points are connected. |\n\nThe two plots below show unemployment over time, both with `geom_line()`. The firsts shows unemployment rate while the second shows the median number of weeks unemployed.\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(economics, aes(date, unemploy / pop)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.5 Example geom_line()-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(economics, aes(date, uempmed)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.5 Example geom_line()-2.png){width=672}\n:::\n:::\n\n\n\nTo compare the relationship, we would like to draw both time series on the same plot. We could draw a scatterplot of unemployment rate vs length of time unemployed, but then we lose the dimension of time. The solution is to join points adjacent in time with line segments, forming a *path* plot.\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(economics, aes(unemploy / pop, uempmed)) + \n  geom_path() +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.5 Example geom_path()-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(economics, aes(unemploy / pop, uempmed)) + \n  geom_path(color = \"grey50\") +\n  geom_point(aes(color = lubridate::year(date)))\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6.5 Example geom_path()-2.png){width=672}\n:::\n:::\n\n\n\n### Exercises\n\n::: callout-note\nGoing through the exercises of this section, they don't all completely line up with content above, so I believe this part is still a WIP. Regardless, I tried to answered the questions to the best of what I think the exercises are going for.\n:::\n\n[1. What’s the problem with the plot created by `ggplot(mpg, aes(cty, hwy)) + geom_point()`? Which of the geoms described above is most effective at remedying the problem?]{.blog-question}\n\nBecause the two values are so highly correlated, there might be some overplotting in the plot. We can check for overplotting imonn a scatterplot by adjust the alpha value of the points.\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q1-2.png){width=672}\n:::\n:::\n\n\n\n[2. One challenge with `ggplot(mpg, aes(class, hwy)) + geom_boxplot()` is that the ordering of class is alphabetical, which is not terribly useful. How could you change the factor levels to be more informative? Rather than reordering the factor by hand, you can do it automatically based on the data: `ggplot(mpg, aes(reorder(class, hwy), hwy)) + geom_boxplot()`. What does `reorder()` do? Read the documentation.]{.blog-question}\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(class, hwy)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(\n  x = factor(class, levels = c(\n    \"pickup\", \"suv\", \"minivan\", \"2seater\", \"subcompact\", \"compact\", \"midsize\")), \n  y = hwy)) + \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q2-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(reorder(class, hwy), hwy)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q2-3.png){width=672}\n:::\n:::\n\n\n\n`reorder()` treats its first argument as a categorical variable, and reorders its levels based on the values of a second variable, usually numeric. Comparing my manual reordering (based on the median line of the boxplots), `reorder()` takes a different approach that doesn't look apparently clear from the boxplot.\n\n[3. Explore the distribution of the carat variable in the `diamonds` dataset. What `binwidth` reveals the most interesting patterns?]{.blog-question}\n\nYou can use either `bin` or `binwidth` to distribute the columns of a histogram. You can test `bin` values arbitrarily until you find a plot that looks good, but using the `binwidth` argument, you can make educated guess as to where to begin and go because the value is directly related to the value/scaling of the x-axis.\n\n\n\n::: {.cell layout-nrow=\"2\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat)) + geom_histogram(binwidth = 1/10)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat)) + geom_histogram(binwidth = 1/50) \n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q3-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat)) + geom_histogram(binwidth = 1/100)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q3-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat)) + geom_histogram(binwidth = 1/500)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q3-4.png){width=672}\n:::\n:::\n\n\n\nUsing `binwidth` values of `1/50` & `1/100` shows that the caret values heavily sit on half and quarter caret values, skewing right until it breaks again.\n\n[4. Explore the distribution of the price variable in the `diamonds` data. How does the distribution vary by cut?]{.blog-question}\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(price)) + geom_freqpoly()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(diamonds, aes(price)) + geom_freqpoly(aes(color = cut))\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q4-2.png){width=672}\n:::\n:::\n\n\n\nThe regular and segmented plots both show a similar distribution. I'm not surprised that higher value cuts sell more, but I am surprised that all the cuts sell the most at the same price range. I would've thought that higher value cuts would seller at higher prices more frequently.\n\n[5. You now know (at least) three ways to compare the distributions of subgroups: `geom_violin()`, `geom_freqpoly()`, and the color aesthetic, or `geom_histogram()` and faceting. What are the strengths and weaknesses of each approach? What other approaches could you try?]{.blog-question}\n\nThe strengths and weakness were outlined pretty well above, but you could also try adjust with the transparency of the data points, which also can be used with two sets of continuous variables.\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_point(alpha = 0.2) # Category vs Continuous\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 0.2) # Continuous vs Continuous\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q5-2.png){width=672}\n:::\n:::\n\n\n\n[6. Read the documentation for `geom_bar()`. What does the weight aesthetic do?]{.blog-question}\n\nThe weight argument in the `geom_bar()` function allows you to adjust the heights of the bars according to the weights of the observations rather than simply counting the number of observations. This can be useful when you have a frequency or probability data set and you want to visualize it accurately.\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\ndata = tibble(\n  category = c(\"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\"),\n  weight = c(1, 2, 1, 3, 1, 2, 1)\n)\n\n# Plot without weights\nggplot(data, aes(category)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Plot with weights\nggplot(data, aes(category, weight = weight)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q6-2.png){width=672}\n:::\n:::\n\n\n\n[7. Using the techniques already discussed in this chapter, come up with three ways to visualize a 2d categorical distribution. Try them out by visualizing the distribution of `model` and `manufacturer`, `trans` and `class`, and `cyl` and `trans`.]{.blog-question}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mpg, aes(manufacturer, model)) + geom_point(aes(size = hwy))\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(class, fill = trans)) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q7-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(cyl)) + geom_bar() + facet_wrap(~trans, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.6 Q7-3.png){width=672}\n:::\n:::\n\n\n\nNot the most insightful plots in the world, but the restrictions were met :)\n\n## Modifying the Axes\n\nThere are two families of useful helpers that let you make the most common modifications.\n\n-   `xlab()` and `ylab()` modify the x-axis and y-axis labels:\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 1 / 3)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.7 Example xlab() and ylab()-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 1 / 3) + \n  xlab(\"city driving (mpg)\") + ylab(\"highway driving (mpg)\")\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.7 Example xlab() and ylab()-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Remove the axis labels with NULL\nggplot(mpg, aes(cty, hwy)) + geom_point(alpha = 1 / 3) + xlab(NULL) + ylab(NULL)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.7 Example xlab() and ylab()-3.png){width=672}\n:::\n:::\n\n\n\n-   `xlim()` and `ylim()` modify the limits of the axes:\n\n\n\n::: {.cell layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_jitter(width = 0.25)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.7 Example xlim() and ylim()-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(drv, hwy)) + geom_jitter(width = 0.25) + xlim(\"f\", \"r\") + ylim(20, 30)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.7 Example xlim() and ylim()-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# For continuous scales, use NA to set only one limit\nggplot(mpg, aes(drv, hwy)) + geom_jitter(width = 0.25, na.rm = TRUE) + ylim(NA, 30)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.7 Example xlim() and ylim()-3.png){width=672}\n:::\n:::\n\n\n\n::: callout-warning\nChanging the axes limits sets values outside the range to `NA` **before** it calculates summary statistics. You may use `na.rm = TRUE` to filter out the new `NA` values, but it is important to understand the order of operations.\n:::\n\n## Output\n\nPlots are usually generated to view immediately, but they can be saved to a variable:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np = ggplot(mpg, aes(displ, hwy, color = factor(cyl))) + geom_point()\n```\n:::\n\n\n\nOnce you have a plot object, you can do a variety of things with it:\n\n-   Render it on screen with `print()` (this happens automatically when running interactively, but needs to be called explicitly in a loop or function):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(p)\n```\n\n::: {.cell-output-display}\n![](ggplot2-book-3e-part1_files/figure-html/2.8 Example sprinting saved plot-1.png){width=672}\n:::\n:::\n\n\n\n-   Save it to disc with `ggsave()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"plot.png\", p, width = 5 , height = 5)\n```\n:::\n\n\n\n-   Briefly describe its structure with `summary()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(p)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndata: manufacturer, model, displ, year, cyl, trans, drv, cty, hwy, fl,\n  class [234x11]\nmapping:  x = ~displ, y = ~hwy, colour = ~factor(cyl)\nfaceting: <ggproto object: Class FacetNull, Facet, gg>\n    compute_layout: function\n    draw_back: function\n    draw_front: function\n    draw_labels: function\n    draw_panels: function\n    finish_data: function\n    init_scales: function\n    map_data: function\n    params: list\n    setup_data: function\n    setup_params: function\n    shrink: TRUE\n    train_scales: function\n    vars: function\n    super:  <ggproto object: Class FacetNull, Facet, gg>\n-----------------------------------\ngeom_point: na.rm = FALSE\nstat_identity: na.rm = FALSE\nposition_identity \n```\n\n\n:::\n:::\n",
    "supporting": [
      "ggplot2-book-3e-part1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}